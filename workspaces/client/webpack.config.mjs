import fs from 'node:fs';
import path from 'node:path';

import webpack from 'webpack';
// @ts-expect-error これはwebpack-bundle-analyzerに型定義がないため、無視しています
import { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer';

/** @type {import('webpack').Configuration} */
const config = {
  cache: {
    buildDependencies: {
      config: [import.meta.filename],
    },
    type: 'filesystem',
  },
  devtool: process.env['NODE_ENV'] === 'production' ? 'source-map' : 'eval-source-map',
  entry: './src/main.tsx',
  mode: process.env['NODE_ENV'] === 'production' ? 'production' : 'development',
  module: {
    rules: [
      {
        exclude: [/node_modules\/video\.js/, /node_modules\/@videojs/],
        resolve: {
          fullySpecified: false,
        },
        test: /\.(?:js|mjs|cjs|jsx|ts|mts|cts|tsx)$/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: [
              [
                '@babel/preset-env',
                {
                  corejs: '3.41',
                  forceAllTransforms: process.env['NODE_ENV'] === 'production',
                  targets: {
                    browsers: [
                      'last 2 Chrome versions',
                      'last 2 Firefox versions',
                      'last 2 Safari versions',
                      'last 2 Edge versions',
                    ],
                  },
                  useBuiltIns: 'entry',
                },
              ],
              ['@babel/preset-react', { runtime: 'automatic' }],
              ['@babel/preset-typescript'],
            ],
          },
        },
      },
      {
        test: /\.png$/,
        type: 'asset/inline',
      },
      {
        test: /\.webp$/,
        type: 'asset/resource',
      },
      {
        resourceQuery: /raw/,
        type: 'asset/source',
      },
      {
        resourceQuery: /arraybuffer/,
        type: 'javascript/auto',
        use: {
          loader: 'arraybuffer-loader',
        },
      },
    ],
  },
  // 最も単純な設定にする
  optimization: {
    minimize: process.env['NODE_ENV'] === 'production',
    runtimeChunk: 'single',
    sideEffects: true,
    splitChunks: {
      cacheGroups: {
        default: {
          minChunks: 2,
          priority: -20,
          reuseExistingChunk: true,
        },
        vendor: {
          chunks: 'all',
          name: 'vendors',
          priority: -10,
          test: /[\\/]node_modules[\\/]/,
        },
      },
      chunks: 'all',
    },
    usedExports: true,
  },
  output: {
    chunkFilename: '[name].js',
    filename: '[name].js',
    path: path.resolve(import.meta.dirname, './dist'),
    publicPath: '/public/',
  },
  performance: {
    hints: process.env['NODE_ENV'] === 'production' ? 'warning' : false,
    maxAssetSize: 250000,
    maxEntrypointSize: 400000,
  },
  // @ts-expect-error WebpackプラグインはTypeScriptの型が不完全なため無視します
  plugins: [
    new webpack.EnvironmentPlugin({
      API_BASE_URL: '/api',
      NODE_ENV: process.env['NODE_ENV'] || 'development',
    }),
    // @ffmpeg/ffmpegのモジュールパスを解決
    new webpack.NormalModuleReplacementPlugin(/\.\/worker\.js/, function (resource) {
      if (resource.context.includes('@ffmpeg/ffmpeg')) {
        resource.request = path.resolve(import.meta.dirname, 'src/mocks/worker-mock.js');
      }
    }),
    // 循環参照を防止
    new webpack.ContextReplacementPlugin(/node_modules/, /__webpack_require__\.c/),
    // HMRプラグインを追加
    new webpack.HotModuleReplacementPlugin(),
    // BundleAnalyzerPluginを条件付きで追加
    ...(process.env['ANALYZE'] ? [new BundleAnalyzerPlugin()] : []),
    // main.cssを生成する
    {
      apply: (compiler) => {
        compiler.hooks.afterEmit.tap('GenerateEmptyCss', () => {
          const cssPath = path.resolve(import.meta.dirname, './dist/main.css');
          if (!fs.existsSync(cssPath)) {
            fs.writeFileSync(cssPath, '/* Generated by Webpack */');
            console.log('Created empty main.css file');
          }
        });
      },
    },
  ],
  resolve: {
    alias: {
      '@ffmpeg/core$': path.resolve(import.meta.dirname, 'node_modules', '@ffmpeg/core/dist/umd/ffmpeg-core.js'),
      '@ffmpeg/core/wasm$': path.resolve(import.meta.dirname, 'node_modules', '@ffmpeg/core/dist/umd/ffmpeg-core.wasm'),
    },
    extensions: ['.js', '.cjs', '.mjs', '.ts', '.cts', '.mts', '.tsx', '.jsx'],
    fallback: {
      crypto: false,
      fs: false,
      path: false,
    },
  },
  ...(process.env['NODE_ENV'] === 'production'
    ? {}
    : {
        devServer: {
          client: {
            overlay: true,
            progress: true,
          },
          compress: true,
          historyApiFallback: true,
          hot: true,
          static: {
            directory: path.resolve(import.meta.dirname, './dist'),
            publicPath: '/public/',
          },
        },
      }),
};

export default config;
